# coding: utf-8

"""
    Infrastructure Management API

    The **Infrastructure Management API** provides a RESTful interface to manage Infrastructure Hosts and Services objects.  The following is a list of the different Services and their string types (the string types are to be used with the APIs for the `service_type` field):  | Service name | Service type |   | ------ | ------ |   | Access Authentication | authn |   | Anycast | anycast |   | Data Connector | cdc |   | DHCP | dhcp |   | DNS | dns |   | DNS Forwarding Proxy | dfp |   | NIOS Grid Connector | orpheus |   | MS AD Sync | msad |   | NTP | ntp |   | BGP | bgp |   | RIP | rip |   | OSPF | ospf |    ---   ### Hosts API  The Hosts API is used to manage the Infrastructure Host resources. These include various operations related to hosts such as viewing, creating, updating, replacing, disconnecting, and deleting Hosts. Management of Hosts is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Hosts tab.  ---   ### Services API  The Services API is used to manage the Infrastructure Service resources (a.k.a. BloxOne applications). These include various operations related to hosts such as viewing, creating, updating, starting/stopping, configuring, and deleting Services. Management of Services is done from the Cloud Services Portal (CSP) by navigating to the Manage -> Infrastructure -> Services tab.  ---   ### Detail APIs  The Detail APIs are read-only APIs used to list all the Infrastructure resources (Hosts and Services). Each resource record returned also contains information about its other associated resources and the status information for itself and the associated resource(s) (i.e., Host/Service status).  ---   

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from infra_mgmt.models.detail_host import DetailHost


class TestDetailHost(unittest.TestCase):
    """DetailHost unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DetailHost:
        """Test DetailHost
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DetailHost`
        """
        model = DetailHost()
        if include_optional:
            return DetailHost(
                composite_status = '',
                configs = [
                    infra_mgmt.models.detail_host_service_config.DetailHostServiceConfig(
                        current_version = '', 
                        service_id = '', 
                        service_name = '', 
                        service_type = '', 
                        status = infra_mgmt.models.short_service_status.ShortServiceStatus(
                            message = '', 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        upgraded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                connectivity_monitor = infra_mgmt.models.connectivity_monitor_represents_connectivity_monitor_properties_eg/
"connectivity_monitor":_{"cost":1000000,"endpoint_type":"csp","endpoint":"http://csp/infoblox/com","interval":15}.connectivity_monitor represents connectivity_monitor properties eg.
"connectivity_monitor": {"cost":1000000,"endpoint_type":"csp","endpoint":"http://csp.infoblox.com","interval":15}(),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                display_name = '',
                host_subtype = '',
                host_type = '',
                host_version = '',
                id = '',
                ip_address = '',
                ip_space = '',
                legacy_id = '',
                location = infra_mgmt.models.detail_location.DetailLocation(
                    address = infra_mgmt.models.address.address(), 
                    id = '', 
                    latitude = 1.337, 
                    longitude = 1.337, 
                    metadata = infra_mgmt.models.metadata.metadata(), ),
                mac_address = '',
                maintenance_mode = '',
                nat_ip = '',
                ophid = '',
                pool = infra_mgmt.models.infrastructure_pool_information_(internal).Infrastructure Pool Information (internal)(
                    composite_status = '', 
                    pool_id = '', 
                    pool_name = '', ),
                serial_number = '',
                services = [
                    infra_mgmt.models.detail_host_service_config.DetailHostServiceConfig(
                        current_version = '', 
                        service_id = '', 
                        service_name = '', 
                        service_type = '', 
                        status = infra_mgmt.models.short_service_status.ShortServiceStatus(
                            message = '', 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        upgraded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                site_id = '',
                tags = None,
                timezone = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return DetailHost(
        )
        """

    def testDetailHost(self):
        """Test DetailHost"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
