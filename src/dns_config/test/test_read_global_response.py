# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from dns_config.models.read_global_response import ReadGlobalResponse


class TestReadGlobalResponse(unittest.TestCase):
    """ReadGlobalResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReadGlobalResponse:
        """Test ReadGlobalResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReadGlobalResponse`
        """
        model = ReadGlobalResponse()
        if include_optional:
            return ReadGlobalResponse(
                result = dns_config.models.global.Global(
                    add_edns_option_in_outgoing_query = True, 
                    custom_root_ns = [
                        dns_config.models.root_ns.RootNS(
                            address = '10.0.0.0', 
                            fqdn = 'example.com', 
                            protocol_fqdn = 'test.key.com.', )
                        ], 
                    custom_root_ns_enabled = True, 
                    dnssec_enable_validation = True, 
                    dnssec_enabled = True, 
                    dnssec_root_keys = [
                        dns_config.models.trust_anchor.TrustAnchor(
                            algorithm = 56, 
                            protocol_zone = '', 
                            public_key = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArGEl09qgDz+9YOH8Ff4Z', 
                            sep = True, 
                            zone = 'dns/auth_zone/16d9158d-d0d7-48e1-9a55-087e7aa419d4', )
                        ], 
                    dnssec_trust_anchors = [
                        dns_config.models.trust_anchor.TrustAnchor(
                            algorithm = 56, 
                            protocol_zone = '', 
                            public_key = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArGEl09qgDz+9YOH8Ff4Z', 
                            sep = True, 
                            zone = 'dns/auth_zone/16d9158d-d0d7-48e1-9a55-087e7aa419d4', )
                        ], 
                    dnssec_validate_expiry = True, 
                    dtc_config = dns_config.models.dtc_config.DTCConfig(
                        default_ttl = 56, ), 
                    ecs_enabled = True, 
                    ecs_forwarding = True, 
                    ecs_prefix_v4 = 56, 
                    ecs_prefix_v6 = 56, 
                    ecs_zones = [
                        dns_config.models.ecs_zone.ECSZone(
                            access = 'allow', 
                            fqdn = 'example.com', 
                            protocol_fqdn = '', )
                        ], 
                    edns_udp_size = 56, 
                    filter_aaaa_acl = [
                        dns_config.models.acl_item.ACLItem(
                            access = 'allow', 
                            acl = '', 
                            address = '', 
                            element = 'ip', 
                            tsig_key = dns_config.models.tsig_key.TSIGKey(
                                algorithm = '', 
                                comment = '', 
                                key = '', 
                                name = '', 
                                protocol_name = '', 
                                secret = '', ), )
                        ], 
                    filter_aaaa_on_v4 = '', 
                    forwarders = [
                        dns_config.models.forwarder.Forwarder(
                            address = '10.0.0.0', 
                            fqdn = 'ns1.example.com', 
                            protocol_fqdn = '', )
                        ], 
                    forwarders_only = True, 
                    gss_tsig_enabled = True, 
                    id = 'dns/global/cd0ad27d-87f3-4f0f-ac71-91272b4c1492', 
                    kerberos_keys = [
                        dns_config.models.kerberos_key.KerberosKey(
                            algorithm = '', 
                            domain = '', 
                            key = 'keys/kerberos/23311109-fad4-448f-a7a7-55ad791ae7eb', 
                            principal = '', 
                            uploaded_at = '', 
                            version = 56, )
                        ], 
                    lame_ttl = 56, 
                    log_query_response = True, 
                    match_recursive_only = True, 
                    max_cache_ttl = 56, 
                    max_negative_ttl = 56, 
                    max_udp_size = 56, 
                    minimal_responses = True, 
                    notify = True, 
                    query_acl = [
                        dns_config.models.acl_item.ACLItem(
                            access = 'allow', 
                            acl = '', 
                            address = '', 
                            element = 'ip', )
                        ], 
                    query_port = 56, 
                    recursion_acl = [
                        
                        ], 
                    recursion_enabled = True, 
                    recursive_clients = 56, 
                    resolver_query_timeout = 56, 
                    secondary_axfr_query_limit = 56, 
                    secondary_soa_query_limit = 56, 
                    sort_list = [
                        dns_config.models.sort_list_item.SortListItem(
                            acl = '', 
                            element = 'ip', 
                            prioritized_networks = [
                                ''
                                ], 
                            source = '', )
                        ], 
                    synthesize_address_records_from_https = True, 
                    transfer_acl = [
                        
                        ], 
                    update_acl = [
                        
                        ], 
                    use_forwarders_for_subzones = True, 
                    use_root_forwarders_for_local_resolution_with_b1td = True, 
                    zone_authority = dns_config.models.zone_authority.ZoneAuthority(
                        default_ttl = 56, 
                        expire = 56, 
                        mname = '', 
                        negative_ttl = 56, 
                        protocol_mname = '', 
                        protocol_rname = '', 
                        refresh = 56, 
                        retry = 56, 
                        rname = '', 
                        use_default_mname = True, ), )
            )
        else:
            return ReadGlobalResponse(
        )
        """

    def testReadGlobalResponse(self):
        """Test ReadGlobalResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
