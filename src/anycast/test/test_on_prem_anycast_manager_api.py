# coding: utf-8

"""
    BloxOne Anycast API

    Anycast capability enables HA (High Availability) configuration of BloxOne applications that run on equipment located on customer's premises (on-prem hosts). Anycast supports DNS, as well as DNS-forwarding services.  Anycast-enabled application setups use multiple on-premises installations for one particular application type. Multiple application instances are configured to use the same endpoint address. Anycast capability is collocated with such application instance, monitoring the local application instance and advertising to the upstream router (a customer equipment) a per-instance, local route to the common application endpoint address, as long as the local application instance is available. Depending on the type of the upstream router, the customer may configure local route advertisement via either BGP (Boarder Gateway Protocol) or OSPF (Open Shortest Path First) routing protocols. Both protocols may be enabled as well. Multiple routes to the common application service address provide redundancy without the need to reconfigure application clients.  Should an application instance become unavailable, the local route advertisements stop, resulting in withdrawal of the route (in the upstream router) to the application instance that has gone out of service and ensuring that subsequent application requests thus get routed to the remaining available application instances.  

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from anycast.api.on_prem_anycast_manager_api import OnPremAnycastManagerApi


class TestOnPremAnycastManagerApi(unittest.TestCase):
    """OnPremAnycastManagerApi unit test stubs"""

    def setUp(self) -> None:
        self.api = OnPremAnycastManagerApi()

    def tearDown(self) -> None:
        pass

    def test_CreateAnycastConfig(self) -> None:
        """Test case for CreateAnycastConfig

        Create Anycast Configuration
        """
        pass

    def test_CreateAnycastVersion(self) -> None:
        """Test case for CreateAnycastVersion

        Create Anycast Version
        """
        pass

    def test_DeleteAnycastConfig(self) -> None:
        """Test case for DeleteAnycastConfig

        Delete Anycast Configuration
        """
        pass

    def test_DeleteAnycastVersion(self) -> None:
        """Test case for DeleteAnycastVersion

        Delete anycast version
        """
        pass

    def test_DeleteOnpremHost(self) -> None:
        """Test case for DeleteOnpremHost

        Delete On-Prem Host
        """
        pass

    def test_GetAnycastConfig(self) -> None:
        """Test case for GetAnycastConfig

        Retrieve Anycast Configuration
        """
        pass

    def test_GetAnycastConfigList(self) -> None:
        """Test case for GetAnycastConfigList

        Retrieve Multiple Anycast Configurations
        """
        pass

    def test_GetAnycastVersion(self) -> None:
        """Test case for GetAnycastVersion

        Retrieve Anycast Version
        """
        pass

    def test_GetOnpremConfig(self) -> None:
        """Test case for GetOnpremConfig

        Retrieve Generated, Per-Host Anycast Configuration
        """
        pass

    def test_GetOnpremConfig2(self) -> None:
        """Test case for GetOnpremConfig2

        Retrieve Generated, Per-Host Anycast Configuration
        """
        pass

    def test_GetOnpremHost(self) -> None:
        """Test case for GetOnpremHost

        Retrieve On-Prem Host
        """
        pass

    def test_GetStatus(self) -> None:
        """Test case for GetStatus

        Retrieve Configuration Status
        """
        pass

    def test_GetStatus2(self) -> None:
        """Test case for GetStatus2

        Retrieve Configuration Status
        """
        pass

    def test_ListAnycastConfigsWithRuntimeStatus(self) -> None:
        """Test case for ListAnycastConfigsWithRuntimeStatus

        Read list of Anycast Configurations
        """
        pass

    def test_ReadAnycastConfigWithRuntimeStatus(self) -> None:
        """Test case for ReadAnycastConfigWithRuntimeStatus

        Read Anycast Configuration
        """
        pass

    def test_UpdateAnycastConfig(self) -> None:
        """Test case for UpdateAnycastConfig

        Create or Update Anycast Configuration
        """
        pass

    def test_UpdateOnpremHost(self) -> None:
        """Test case for UpdateOnpremHost

        Create or Update On-Prem Host
        """
        pass


if __name__ == '__main__':
    unittest.main()
